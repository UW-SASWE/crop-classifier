Important URLs for development:
Original code: https://code.earthengine.google.com/127ceee050c5075047af4857459349f8
Original appview: https://climateclass.users.earthengine.app/view/crop-classifier
Original developer: Shahryar Ahmad (shahryarkhalique.ahmad@nasa.gov; skahmad@uw.edu)
UW Web Brand (https://www.washington.edu/brand/web/guides-and-how-tos/html-templates/)
Crop classification example on nigeria: https://developers.google.com/earth-engine/tutorials/community/classify-maizeland-ng

1. Install npm and node: https://developers.google.com/drive/api/quickstart/nodejs
2. Install the earth engine api: 
3. Create a project (https://developers.google.com/earth-engine/earthengine_cloud_project_setup) and enable the Earth Engine API.
4. Set up a service account (https://developers.google.com/earth-engine/cloud/earthengine_cloud_project_setup)
5. Create authentication credentials (https://developers.google.com/earth-engine/guides/service_account) and download private key
5. Register service account: https://signup.earthengine.google.com/#!/service_accounts



TODO:
- go through this: https://gis.stackexchange.com/questions/342022/trouble-plotting-earth-engine-images-with-folium-using-python and the leaflet and https://github.com/google/earthengine-api
- Add the UW Privacy Policy and Terms of use (https://itconnect.uw.edu/tools-services-support/storage-hosting/shared-hosting/tos-privacy/)
- Connect with google drive
- Load the original javascript
- Connect it with the frontend
- Databasing and caching (I don't even know what I mean by this step but I feel it's something that I'll have to tackle at a point)
- Customize the header (Reacher out to the marketing department)
- Customize the footer (Reacher out to the marketing department)

Plan:
1. Host the web app on the UW web server.
    - Struggling to get it running on the UW server
        * I think I will need other support options
    - In the mean time, look for easy (or quick and dirty) way to show some results
        * Glitch
    - Later on, if the UW web hosting platform is still challenging, look at other options for scaling up
        * AWS Elastic Beanstalk (will need some additional learning).
2. Find a way to upload training data:
    - Specify region of interest:
        * Upload shapefiles
            + GeoJSON
            + shapefiles*
        * Draw shapefile
    - Training points with classes.
        * Upload shapefiles
            + GeoJSON
            + csv
            + shapefiles*
        * Specify training points manually
    - Take out multiple file selection
3. Save the trained model:
    - Server-side database.
    - Local cache database.
4. Use the trained model to make prediction.
5. Export classified image

Solution to the spawn ENAMETOOLING: add an asynchronous callback function to the getMap() function.
ceehelp@uw.edu


Next:
1. Prepare CC for the presentation of concept.
2. Display quantitative metrics on the webapp (plus downloadable csv)
4. Download output raster
3. Save trained EE ML model
4. Dynamic hosting hurdle
5. Databasing (or local caching)
5. Add bells and whistles:
    - Expand input format to include manual delineation of AOI
    - Manual class assignment for training and validation
    - Further work to beautify the frontend

----------------------------------------------
After meeting with Faisal on December 17, 2022
----------------------------------------------
* Focus on Bangladesh
    - Fixed region of interest (ROI)
* Map
    - Polygon + statistics
    - Unions and their statistics (as a starter for the above point)
        + Shapefile from Shahzaib
        + Sub-districts (Upazillas)
        + Generate statistics (or quantitative metrics) for each sub-districts
* Downloadable outputs
* Input for training
    - A simple spreadsheet
* Restricted access
    - Require password
    - MySQL
